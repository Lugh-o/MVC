openapi: 3.0.3
info:
  title: Projeto MVC - WDEV
  description: |-
   Esse projeto é uma aplicação simples construído em PHP utilizando o padrão MVC seguindo os tutoriais do canal WDEV
    
    Some useful links:
    - [Playlist no Youtube](https://www.youtube.com/playlist?list=PL_zkXQGHYosGQwNkMMdhRZgm4GjspTnXs)
  contact:
    email: lughfalcao@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: api
    description: API info
  - name: auth
    description: JWT Token generator
  - name: testimonies
    description: Operations about Testimonies
  - name: users
    description: Operations about users
paths:
  /api/v1:
    get:
      tags:
        - api
      summary: Get API information
      description: Get API information
      operationId: getAPI
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API'   
  /api/v1/auth:
    post:
      tags:
        - auth
      summary: redeem JWT token
      description: redeem JWT token by logging in as an admin
      requestBody:
        description: admin credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@email.com
                senha:
                  type: string
                  example: password
      responses:
        '201':
          description: token created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: xxxx.yyyy.zzzz
        '400':
          description: invalid user or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: O usuario ou senha sao invalidos
  /api/v1/testimonies:
    get:
      tags:
        - testimonies
      summary: Returns all testimonies
      description: Returns all testimonies, and the instance of pagination
      parameters:
      - name: page
        in: query
        description: Select the current page shown.
        required: false
        explode: true
        schema:
          type: integer
          default: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimonies'
    post:
      tags:
        - testimonies
      summary: Posts a new testimony
      description: Posts a new testimony, and then returns it
      requestBody:
        description: new testimony
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newTestimony'
      security: 
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimony'
        '400':
          description: required fields not filled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Os campos 'nome' e 'mensagem' sao obrigatorios"
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /api/v1/testimonies/{id}:
    get:
      tags:
        - testimonies
      summary: Returns testimony by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the testimony to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimony'
        '400':
          description: invalid id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O id nao e valido"
        '404':
          description: testimony not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O depoimento 1 nao foi encontrado"
    put:
      tags:
        - testimonies
      summary: Updates a testimony
      requestBody:
        description: new testimony
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newTestimony'
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the testimony to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimony'
        '400':
          description: required fields not filled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Os campos 'nome' e 'mensagem' sao obrigatorios"
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    delete:
      tags:
        - testimonies
      summary: Deletes a testimony
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the testimony to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  sucesso:
                    type: boolean
                    example: true
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: testimony not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O depoimento 1 nao foi encontrado"
  /api/v1/users:
    get:
      tags:
        - users
      summary: Returns all users
      security: 
        - bearerAuth: []
      description: Returns all users, and the instance of pagination
      parameters:
      - name: page
        in: query
        description: Select the current page shown.
        required: false
        explode: true
        schema:
          type: integer
          default: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
    post:
      tags:
        - users
      summary: Sign up a new user
      description: Sign up a new user, and then returns it
      security: 
        - bearerAuth: []
      requestBody:
        description: new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUser'
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: required fields not filled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Os campos 'nome', 'email' e 'senha' sao obrigatorios"
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              
  /api/v1/users/me:
    get:
      tags:
        - users
      summary: Returns current user 
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'    
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /api/v1/users/{id}:
    get:
      tags:
        - users
      summary: Returns user by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the user to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: invalid id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O id nao e valido"
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O usuario 1 nao foi encontrado"
    put:
      tags:
        - users
      summary: Updates a user
      requestBody:
        description: new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUser'
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the user to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: required fields not filled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Os campos 'nome', 'email' e 'senha' sao obrigatorios"
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    delete:
      tags:
        - users
      summary: Deletes a user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric id of the user to get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  sucesso:
                    type: boolean
                    example: true
        '403':
          description: invalid jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O usuario 1 nao foi encontrado"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT    
  schemas:
    API:
      type: object
      properties:
        nome:
          type: string
          example: "API - WDEV"
        versao:
          type: string
          example: "v1.0.0"
        autor:
          type: string
          example: "Lucas Falcao"
        email:
          type: string
          example: "lughfalcao@gmail.com"
    Testimonies:
      type: object
      properties:
        depoimentos: 
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Testimony'
              - $ref: '#/components/schemas/Testimony'
        paginacao: 
            $ref: '#/components/schemas/Pagination'
    Testimony:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nome:
          type: string
          example: Lucas Falcao
        mensagem:
          type: string
          example: Hello World
        data:
          type: string
          example: 2024-05-09 08:45:15        
    newTestimony:
      type: object
      properties:
        nome:
          type: string
          example: Lucas Falcao
        mensagem:
          type: string
          example: Hello World
    Users:
      type: object
      properties:
        usuarios: 
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/User'
              - $ref: '#/components/schemas/User'
        paginacao: 
            $ref: '#/components/schemas/Pagination'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nome:
          type: string
          example: Lucas Falcao
        email:
          type: string
          example: email@email.com
    newUser:
      type: object
      properties:
        nome:
          type: string
          example: Lucas Falcao
        email:
          type: string
          example: email@email.com
        senha:
          type: string
          example: password
    Pagination: 
      type: object
      properties:
        paginaAtual:
          type: integer
          format: int64
          example: 1
        quantidadePaginas:
          type: integer
          format: int64
          example: 6
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          example: "Token Inválido"